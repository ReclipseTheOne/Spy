# Enterprise Data Management System - Complex inheritance, interfaces, and design patterns
# This demonstrates: multiple interfaces, complex inheritance chains, static factories, final security

# Core data interfaces
interface Serializable {
    def serialize() -> str;
    def deserialize(data: str) -> None;
}

interface Cacheable {
    def get_cache_key() -> str;
    def is_cache_valid() -> bool;
    def invalidate_cache() -> None;
}

interface Auditable {
    def get_audit_trail() -> list;
    def log_action(action: str, user: str) -> None;
}

interface Searchable {
    def get_search_terms() -> list;
    def matches_query(query: str) -> bool;
}

# Abstract base entity class
abstract class Entity implements Serializable, Auditable {
    def __init__(self, id: str) -> None {
        self.id = id;
        self.created_at = self.get_current_timestamp();
        self.updated_at = self.created_at;
        self.audit_trail = [];
        self.version = 1;
    }

    # Static factory methods
    static def create_with_id(id: str) -> "Entity" {
        # Factory method to be overridden by subclasses
        raise NotImplementedError("Subclasses must implement create_with_id");
    }

    static def get_current_timestamp() -> str {
        import datetime;
        return datetime.datetime.now().isoformat();
    }

    # Abstract methods
    abstract def validate() -> bool;
    abstract def get_entity_type() -> str;

    # Final security methods that cannot be overridden
    final def get_id() -> str {
        return self.id;
    }

    final def get_version() -> int {
        return self.version;
    }

    final def increment_version() -> None {
        self.version += 1;
        self.updated_at = self.get_current_timestamp();
    }

    # Auditable interface implementation
    def get_audit_trail() -> list {
        return self.audit_trail.copy();
    }

    final def log_action(action: str, user: str) -> None {
        entry = {
            "action": action,
            "user": user,
            "timestamp": self.get_current_timestamp(),
            "version": self.version
        };
        self.audit_trail.append(entry);
        if len(self.audit_trail) > 100 {  # Keep only last 100 entries
            self.audit_trail = self.audit_trail[-100:];
        }
    }

    # Serializable interface implementation
    def serialize() -> str {
        data = {
            "id": self.id,
            "type": self.get_entity_type(),
            "created_at": self.created_at,
            "updated_at": self.updated_at,
            "version": self.version
        };
        return str(data);  # Simplified JSON serialization
    }

    def deserialize(data: str) -> None {
        # Basic deserialization logic
        self.updated_at = self.get_current_timestamp();
        self.increment_version();
    }
}

# Abstract document class for file-based entities
abstract class Document extends Entity implements Cacheable, Searchable {
    def __init__(self, id: str, title: str, content: str) -> None {
        super().__init__(id);
        self.title = title;
        self.content = content;
        self.cache_timestamp = None;
        self.tags = [];
    }

    # Cacheable interface implementation
    def get_cache_key() -> str {
        return f"doc_{self.id}_{self.version}";
    }

    def is_cache_valid() -> bool {
        if self.cache_timestamp is None {
            return False;
        }
        # Cache valid for 1 hour (simplified)
        return True;  # Simplified logic
    }

    final def invalidate_cache() -> None {
        self.cache_timestamp = None;
    }

    # Searchable interface implementation
    def get_search_terms() -> list {
        terms = self.title.lower().split() + self.content.lower().split();
        return list(set(terms + self.tags));  # Remove duplicates
    }

    def matches_query(query: str) -> bool {
        query_lower = query.lower();
        return (query_lower in self.title.lower() or
                query_lower in self.content.lower() or
                query_lower in self.tags);
    }

    # Document-specific methods
    final def add_tag(tag: str) -> None {
        if tag not in self.tags {
            self.tags.append(tag);
            self.invalidate_cache();
            self.log_action(f"Added tag: {tag}", "system");
        }
    }

    final def remove_tag(tag: str) -> None {
        if tag in self.tags {
            self.tags.remove(tag);
            self.invalidate_cache();
            self.log_action(f"Removed tag: {tag}", "system");
        }
    }

    abstract def get_word_count() -> int;
}

# Contract document - high security, immutable once signed
final class Contract extends Document {
    def __init__(self, id: str, title: str, content: str, parties: list) -> None {
        super().__init__(id, title, content);
        self.parties = parties;
        self.signed = False;
        self.signature_date = None;
        self.is_template = False;
    }

    static def create_with_id(id: str) -> "Contract" {
        return Contract(id, "New Contract", "", []);
    }

    static def create_template(id: str, title: str, template_content: str) -> "Contract" {
        contract = Contract(id, title, template_content, []);
        contract.is_template = True;
        return contract;
    }

    def get_entity_type() -> str {
        return "Contract";
    }

    def validate() -> bool {
        return (len(self.title) > 0 and
                len(self.content) > 0 and
                len(self.parties) >= 2);
    }

    def get_word_count() -> int {
        return len(self.content.split());
    }

    # Security: Final methods that prevent tampering
    final def sign_contract(user: str) -> bool {
        if self.signed {
            return False;  # Already signed
        }
        if not self.validate() {
            return False;  # Invalid contract
        }

        self.signed = True;
        self.signature_date = self.get_current_timestamp();
        self.log_action(f"Contract signed by {user}", user);
        return True;
    }

    final def is_signed() -> bool {
        return self.signed;
    }

    final def get_parties() -> list {
        return self.parties.copy();  # Return copy to prevent external modification
    }
}

# Policy document - versioned, with approval workflow
final class Policy extends Document {
    def __init__(self, id: str, title: str, content: str, department: str) -> None {
        super().__init__(id, title, content);
        self.department = department;
        self.status = "draft";  # draft, review, approved, archived
        self.approved_by = None;
        self.effective_date = None;
    }

    static def create_with_id(id: str) -> "Policy" {
        return Policy(id, "New Policy", "", "General");
    }

    def get_entity_type() -> str {
        return "Policy";
    }

    def validate() -> bool {
        return (len(self.title) > 0 and
                len(self.content) > 50 and  # Policies need substantial content
                self.department != "");
    }

    def get_word_count() -> int {
        return len(self.content.split());
    }

    final def submit_for_review(user: str) -> bool {
        if self.status != "draft" {
            return False;
        }
        if not self.validate() {
            return False;
        }

        self.status = "review";
        self.log_action(f"Submitted for review by {user}", user);
        return True;
    }

    final def approve_policy(approver: str) -> bool {
        if self.status != "review" {
            return False;
        }

        self.status = "approved";
        self.approved_by = approver;
        self.effective_date = self.get_current_timestamp();
        self.log_action(f"Approved by {approver}", approver);
        return True;
    }

    final def archive_policy(user: str) -> bool {
        if self.status not in ["approved", "review"] {
            return False;
        }

        self.status = "archived";
        self.log_action(f"Archived by {user}", user);
        return True;
    }

    final def get_status() -> str {
        return self.status;
    }
}

# Document management utility class
final class DocumentManager {
    static def create_document(doc_type: str, id: str) -> Document {
        if doc_type == "contract" {
            return Contract.create_with_id(id);
        } elif doc_type == "policy" {
            return Policy.create_with_id(id);
        } else {
            raise ValueError(f"Unknown document type: {doc_type}");
        }
    }

    static def search_documents(documents: list, query: str) -> list {
        results = [];
        for doc in documents {
            if isinstance(doc, Searchable) and doc.matches_query(query) {
                results.append(doc);
            }
        }
        return results;
    }

    static def get_cache_stats(documents: list) -> dict {
        total = len(documents);
        cached = sum(1 for doc in documents if isinstance(doc, Cacheable) and doc.is_cache_valid());
        return {"total": total, "cached": cached, "cache_ratio": cached / total if total > 0 else 0};
    }

    static def export_audit_report(documents: list) -> str {
        report = "=== AUDIT REPORT ===\n";
        for doc in documents {
            if isinstance(doc, Auditable) {
                report += f"\nDocument: {doc.get_id()}\n";
                for entry in doc.get_audit_trail() {
                    report += f"  {entry['timestamp']}: {entry['action']} by {entry['user']}\n";
            }
        }
        return report;
    }
}

# Demonstration function
def run_enterprise_demo() -> None {
    print("=== Enterprise Data Management Demo ===\n");

    # Create documents
    contract = Contract.create_with_id("CONT_001");
    contract.title = "Software License Agreement";
    contract.content = "This agreement governs the use of our software...";
    contract.parties = ["TechCorp Inc.", "Client Solutions LLC"];
    contract.add_tag("software");
    contract.add_tag("license");

    policy = Policy.create_with_id("POL_001");
    policy.title = "Remote Work Policy";
    policy.content = "This policy outlines the guidelines and expectations for employees working remotely. All remote workers must maintain regular communication with their teams and ensure data security protocols are followed at all times.";
    policy.department = "HR";
    policy.add_tag("remote");
    policy.add_tag("hr");

    documents = [contract, policy];

    # Demonstrate workflow
    print("1. Document Creation:");
    for doc in documents {
        print(f"   Created {doc.get_entity_type()}: {doc.title}");
        print(f"   Valid: {doc.validate()}");
        print(f"   Word count: {doc.get_word_count()}");
    }

    print("\n2. Policy Workflow:");
    policy.submit_for_review("john.doe");
    print(f"   Policy status after review submission: {policy.get_status()}");
    policy.approve_policy("jane.manager");
    print(f"   Policy status after approval: {policy.get_status()}");

    print("\n3. Contract Workflow:");
    success = contract.sign_contract("legal.team");
    print(f"   Contract signed: {success}");
    print(f"   Contract is signed: {contract.is_signed()}");

    print("\n4. Search Functionality:");
    search_results = DocumentManager.search_documents(documents, "remote");
    print(f"   Documents matching 'remote': {len(search_results)}");
    for doc in search_results {
        print(f"     - {doc.title}");
    }

    print("\n5. Cache Statistics:");
    cache_stats = DocumentManager.get_cache_stats(documents);
    print(f"   Total documents: {cache_stats['total']}");
    print(f"   Cached documents: {cache_stats['cached']}");
    print(f"   Cache ratio: {cache_stats['cache_ratio']:.2%}");

    print("\n6. Audit Trail:");
    audit_report = DocumentManager.export_audit_report(documents);
    print(audit_report);

    print("\n7. Serialization:");
    for doc in documents {
        print(f"   {doc.get_entity_type()} serialized: {doc.serialize()[:100]}...");
}
