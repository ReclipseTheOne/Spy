# Animal Kingdom Example - Showcasing inheritance, interfaces, and class modifiers
# This demonstrates: abstract classes, final classes, static methods, interfaces, extends, implements

# Define interfaces for different behaviors
interface Flyable {
    def fly() -> None;
    def get_max_altitude() -> float;
}

interface Swimmable {
    def swim() -> None;
    def get_max_depth() -> float;
}

interface Runnable {
    def run() -> None;
    def get_max_speed() -> float;
}

# Abstract base class for all animals
abstract class Animal {
    def __init__(self, name: str, age: int) -> None {
        self.name = name;
        self.age = age;
    }
    
    # Abstract method that must be implemented by subclasses
    abstract def make_sound() -> str;
    
    # Final method that cannot be overridden
    final def get_info() -> str {
        return f"{self.name} is {self.age} years old";
    }
    
    # Static utility method
    static def get_kingdom() -> str {
        return "Animalia";
    }
}

# Bird class that extends Animal and implements Flyable
class Bird extends Animal implements Flyable {
    def __init__(self, name: str, age: int, wingspan: float) -> None {
        super().__init__(name, age);
        self.wingspan = wingspan;
    }
    
    def make_sound() -> str {
        return "Tweet tweet!";
    }
    
    def fly() -> None {
        print(f"{self.name} is flying with wingspan {self.wingspan}m");
    }
    
    def get_max_altitude() -> float {
        return 1000.0;  # Base altitude for birds
    }
}

# Fish class that extends Animal and implements Swimmable
class Fish extends Animal implements Swimmable {
    def __init__(self, name: str, age: int, fin_count: int) -> None {
        super().__init__(name, age);
        self.fin_count = fin_count;
    }
    
    def make_sound() -> str {
        return "Blub blub!";
    }
    
    def swim() -> None {
        print(f"{self.name} is swimming with {self.fin_count} fins");
    }
    
    def get_max_depth() -> float {
        return 100.0;  # Base depth for fish
    }
}

# Duck - a special case that can both fly and swim
final class Duck extends Bird implements Swimmable {
    def __init__(self, name: str, age: int) -> None {
        super().__init__(name, age, 0.6);  # Ducks have ~60cm wingspan
    }
    
    def make_sound() -> str {
        return "Quack quack!";
    }
    
    def swim() -> None {
        print(f"{self.name} the duck is paddling on water");
    }
    
    def get_max_depth() -> float {
        return 5.0;  # Ducks don't dive very deep
    }
    
    def get_max_altitude() -> float {
        return 500.0;  # Lower than other birds
    }
    
    # Duck-specific method
    final def dabble() -> None {
        print(f"{self.name} is dabbling for food");
    }
}

# Cheetah - fastest land animal
final class Cheetah extends Animal implements Runnable {
    def __init__(self, name: str, age: int) -> None {
        super().__init__(name, age);
    }
    
    def make_sound() -> str {
        return "Chirp roar!";
    }
    
    def run() -> None {
        print(f"{self.name} the cheetah is running at incredible speed!");
    }
    
    def get_max_speed() -> float {
        return 120.0;  # km/h
    }
    
    static def get_conservation_status() -> str {
        return "Vulnerable";
    }
}

# Utility functions to demonstrate the system
def demonstrate_animal_behaviors() -> None {
    # Create instances
    duck = Duck("Donald", 3);
    cheetah = Cheetah("Flash", 5);
    
    # Demonstrate basic animal behavior
    print(duck.get_info());
    print(duck.make_sound());
    
    print(cheetah.get_info());
    print(cheetah.make_sound());
    
    # Demonstrate interface behaviors
    duck.fly();
    duck.swim();
    duck.dabble();
    
    cheetah.run();
    print(f"Max speed: {cheetah.get_max_speed()} km/h");
    
    # Static method calls
    print(f"Kingdom: {Animal.get_kingdom()}");
    print(f"Cheetah status: {Cheetah.get_conservation_status()}");
}
